{"ast":null,"code":"import { AgentStatus } from '../enums/agent-status.enum';\nimport { of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AgentService = /*#__PURE__*/(() => {\n  class AgentService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getStatus() {\n      return this.http.get('/status').pipe(switchMap(() => of(AgentStatus.Up)), catchError(this.handleError('getStatus', AgentStatus.Down)));\n    }\n\n    getConnections() {\n      return this.http.get('/connections').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getConnections', [])));\n    }\n\n    removeConnection(connectionId) {\n      if (!connectionId) {\n        console.error('Must provide a connection ID');\n        return;\n      }\n\n      return this.http.post(`/connections/${connectionId}/remove`, {}).pipe(switchMap(() => of(connectionId)), catchError(this.handleError('removeConnection', null)));\n    }\n\n    createInvitation() {\n      return this.http.post('/connections/create-invitation', {}).pipe(switchMap(response => of(response)), catchError(this.handleError('createInvitation', null)));\n    }\n\n    receiveInvitation(invitation) {\n      return this.http.post('/connections/receive-invitation', invitation).pipe(switchMap(response => of(response)), catchError(this.handleError('receiveInvitation', null)));\n    }\n\n    getCredentials() {\n      return this.http.get('/credentials').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getCredentials', [])));\n    }\n\n    getProofs() {\n      return this.http.get('/present-proof/records').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getProofs', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(`${operation} failed: ${error.message}`); // Prevent application from completely erroring out.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  AgentService.ɵfac = function AgentService_Factory(t) {\n    return new (t || AgentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AgentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AgentService,\n    factory: AgentService.ɵfac,\n    providedIn: 'root'\n  });\n  return AgentService;\n})();","map":null,"metadata":{},"sourceType":"module"}